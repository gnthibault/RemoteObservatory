# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

# Configuration for telegraf agent
[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  hostname = "observatory"
  omit_hostname = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  logtarget = "stderr"
  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = "/etc/telegraf/log.txt"


###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending specific system metrics to InfluxDB
[[outputs.influxdb_v2]]
urls = ["http://influxdb-observatory:8086"]
token = "observatory"
organization = "observatory"
bucket = "system"
namepass = ["cpu", "disk", "diskio", "kernel", "mem", "processes", "swap", "system", "net", "cpu_temperature", "gpu_temperature"]

# Configuration for sending metrics to InfluxDB
[[outputs.influxdb_v2]]
urls = ["http://influxdb-observatory:8086"]
token = "observatory"
organization = "observatory"
bucket = "observatory"
namepass = ["mqtt_observatory_broker", "mqtt_observatory_weather", "mqtt_observatory_field", "mqtt_observatory_guiding_status", "mqtt_observatory_guiding", "mqtt_observatory_status",]


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################
# Read metrics from MQTT topic(s)
[[inputs.mqtt_consumer]]
  name_override = "mqtt_observatory_broker"
  servers = ["tcp://mosquitto-observatory:1883"]
  topics = ["observatory/BROKER",]
  data_format = "json_v2"
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "data"
      type = "String"

[[inputs.mqtt_consumer]]
  name_override = "mqtt_observatory_weather"
  servers = ["tcp://mosquitto-observatory:1883"]
  topics = ["observatory/WEATHER",]
  data_format = "json_v2"
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "data"

[[inputs.mqtt_consumer]]
  name_override = "mqtt_observatory_field"
  servers = ["tcp://mosquitto-observatory:1883"]
  topics = ["observatory/FIELD",]
  data_format = "json_v2"
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "name"
      type = "String"

[[inputs.mqtt_consumer]]
  name_override = "mqtt_observatory_guiding_status"
  servers = ["tcp://mosquitto-observatory:1883"]
  topics = ["observatory/GUIDING_STATUS",]
  data_format = "json_v2"
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "data"

[[inputs.mqtt_consumer]]
  name_override = "mqtt_observatory_guiding"
  servers = ["tcp://mosquitto-observatory:1883"]
  topics = ["observatory/GUIDING",]
  data_format = "json_v2"
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "data"

[[inputs.mqtt_consumer]]
  name_override = "mqtt_observatory_status"

  ## Broker URLs for the MQTT server or cluster.  To connect to multiple
  ## clusters or standalone servers, use a separate plugin instance.
  ##   example: servers = ["tcp://localhost:1883"]
  ##            servers = ["ssl://localhost:1883"]
  ##            servers = ["ws://localhost:9001"]
  servers = ["tcp://mosquitto-observatory:1883"]
  topics = ["observatory/STATUS"]

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "json_v2"

  # It would have been impossible without this: https://www.influxdata.com/blog/mqtt-topic-payload-parsing-telegraf/
  # And this: https://github.com/influxdata/telegraf/tree/master/plugins/parsers/json_v2
#  [[inputs.mqtt_consumer.topic_parsing]]
#        topic = "observatory/+"  # topics with 2 segments
#        tags = "_/subsystem"

# Queries that use field values as filters must scan all values that match the other conditions in the query. As a result, those queries are not performant relative to queries on tags
# Both tag keys and tag values are stored as strings and record metadata, unlike fields, tags are indexed
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "state" # GJSON path: JSON is flat -- all keys at root
      type = "String"
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "system"
    [[inputs.mqtt_consumer.json_v2.object]]
      path = "observatory"

  ## The message topic will be stored in a tag specified by this value.  If set
  ## to the empty string no topic tag will be created.
  # topic_tag = "topic"

  ## QoS policy for messages
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  ##
  ## When using a QoS of 1 or 2, you should enable persistent_session to allow
  ## resuming unacknowledged messages.
  # qos = 0

  ## Connection timeout for initial connection in seconds
  # connection_timeout = "30s"

  ## Maximum messages to read from the broker that have not been written by an
  ## output.  For best throughput set based on the number of metrics within
  ## each message and the size of the output's metric_batch_size.
  ##
  ## For example, if each message from the queue contains 10 metrics and the
  ## output metric_batch_size is 1000, setting this to 100 will ensure that a
  ## full batch is collected and the write is triggered immediately without
  ## waiting until the next flush_interval.
  # max_undelivered_messages = 1000

  ## Persistent session disables clearing of the client session on connection.
  ## In order for this option to work you must also set client_id to identify
  ## the client.  To receive messages that arrived while the client is offline,
  ## also set the qos option to 1 or 2 and don't forget to also set the QoS when
  ## publishing.
  # persistent_session = false

  ## If unset, a random client ID will be generated.
  # client_id = ""

  ## Username and password to connect MQTT server.
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Enable extracting tag values from MQTT topics
  ## _ denotes an ignored entry in the topic path
  # [[inputs.mqtt_consumer.topic_parsing]]
  #   topic = ""
  #   measurement = ""
  #   tags = ""
  #   fields = ""
  ## Value supported is int, float, unit
  #   [[inputs.mqtt_consumer.topic.types]]
  #      key = type


[[inputs.exec]]
  commands = ["bash /etc/telegraf/scripts/get_cpu_temp.sh"]
  name_override = "cpu_temperature"
  data_format = "value"
  data_type = "float"

[[inputs.exec]]
  commands = ["bash /etc/telegraf/scripts/get_gpu_temp.sh"]
  name_override = "gpu_temperature"
  data_format = "value"
  data_type = "float"

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states.
  report_active = false

# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  # mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb", "vd*"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false
  #
  ## On systems which support it, device metadata can be added in the form of
  ## tags.
  ## Currently only Linux is supported via udev properties. You can view
  ## available properties for a device by running:
  ## 'udevadm info -q property -n /dev/sda'
  ## Note: Most, but not all, udev properties can be accessed this way. Properties
  ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
  # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  #
  ## Using the same metadata source as device_tags, you can also customize the
  ## name of the device via templates.
  ## The 'name_templates' parameter is a list of templates to try and apply to
  ## the device. The template may contain variables in the form of '$PROPERTY' or
  ## '${PROPERTY}'. The first template which does not contain any variables not
  ## present for the device is used as the device name tag.
  ## The typical use case is for LVM volumes, to get the VG/LV name instead of
  ## the near-meaningless DM-0 name.
  # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]

# Collect TCP connections state and UDP socket counts
[[inputs.net]]
  # no configuration
